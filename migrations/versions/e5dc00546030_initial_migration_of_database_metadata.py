"""initial migration of database metadata

Revision ID: e5dc00546030
Revises: 506d2bf8f310
Create Date: 2024-09-09 16:19:29.061526

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e5dc00546030'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('datasette_request_logs',
    sa.Column('insert_id', sa.VARCHAR(), nullable=False),
    sa.Column('log_name', sa.VARCHAR(), nullable=True),
    sa.Column('resource', sa.VARCHAR(), nullable=True),
    sa.Column('text_payload', sa.VARCHAR(), nullable=True),
    sa.Column('timestamp', sa.DATETIME(), nullable=True),
    sa.Column('receive_timestamp', sa.DATETIME(), nullable=True),
    sa.Column('severity', sa.VARCHAR(), nullable=True),
    sa.Column('http_request', sa.VARCHAR(), nullable=True),
    sa.Column('labels', sa.VARCHAR(), nullable=True),
    sa.Column('operation', sa.VARCHAR(), nullable=True),
    sa.Column('trace', sa.VARCHAR(), nullable=True),
    sa.Column('span_id', sa.VARCHAR(), nullable=True),
    sa.Column('trace_sampled', sa.BOOLEAN(), nullable=True),
    sa.Column('source_location', sa.VARCHAR(), nullable=True),
    sa.Column('cache_hit', sa.VARCHAR(), nullable=True),
    sa.Column('cache_lookup', sa.VARCHAR(), nullable=True),
    sa.Column('request_url', sa.VARCHAR(), nullable=True),
    sa.Column('protocol', sa.VARCHAR(), nullable=True),
    sa.Column('cache_fill_bytes', sa.VARCHAR(), nullable=True),
    sa.Column('response_size', sa.FLOAT(), nullable=True),
    sa.Column('server_ip', sa.VARCHAR(), nullable=True),
    sa.Column('cache_validated_with_origin_server', sa.VARCHAR(), nullable=True),
    sa.Column('request_method', sa.VARCHAR(), nullable=True),
    sa.Column('request_size', sa.INTEGER(), nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), nullable=True),
    sa.Column('status', sa.INTEGER(), nullable=True),
    sa.Column('referer', sa.VARCHAR(), nullable=True),
    sa.Column('latency', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip', sa.VARCHAR(), nullable=True),
    sa.Column('request_url_path', sa.VARCHAR(), nullable=True),
    sa.Column('request_url_query', sa.VARCHAR(), nullable=True),
    sa.Column('request_url_scheme', sa.VARCHAR(), nullable=True),
    sa.Column('request_url_netloc', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_city', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_loc', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_org', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_hostname', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country_name', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_asn', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_timezone', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_latitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_longitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_postal', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_region', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_full_location', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    op.create_table('intake_logs',
    sa.Column('insert_id', sa.VARCHAR(), nullable=False),
    sa.Column('timestamp', sa.DATETIME(), nullable=True),
    sa.Column('remote_ip', sa.VARCHAR(), nullable=True),
    sa.Column('request_method', sa.VARCHAR(), nullable=True),
    sa.Column('request_uri', sa.VARCHAR(), nullable=True),
    sa.Column('response_status', sa.INTEGER(), nullable=True),
    sa.Column('request_bytes', sa.BIGINT(), nullable=True),
    sa.Column('response_bytes', sa.BIGINT(), nullable=True),
    sa.Column('response_time_taken', sa.BIGINT(), nullable=True),
    sa.Column('request_host', sa.VARCHAR(), nullable=True),
    sa.Column('request_referer', sa.VARCHAR(), nullable=True),
    sa.Column('request_user_agent', sa.VARCHAR(), nullable=True),
    sa.Column('request_operation', sa.VARCHAR(), nullable=True),
    sa.Column('request_bucket', sa.VARCHAR(), nullable=True),
    sa.Column('request_object', sa.VARCHAR(), nullable=True),
    sa.Column('tag', sa.VARCHAR(), nullable=True),
    sa.Column('object_path', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_type', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_city', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_loc', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_org', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_hostname', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country_name', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_asn', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_timezone', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_latitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_longitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_postal', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_region', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_full_location', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    op.create_table('out_s3_logs',
    sa.Column('request_id', sa.VARCHAR(), nullable=False),
    sa.Column('time', sa.DATETIME(), nullable=True),
    sa.Column('table', sa.VARCHAR(), nullable=True),
    sa.Column('version', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_city', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_loc', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_org', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_hostname', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country_name', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_asn', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_timezone', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_latitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_longitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_postal', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_region', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_full_location', sa.VARCHAR(), nullable=True),
    sa.Column('access_point_arn', sa.VARCHAR(), nullable=True),
    sa.Column('acl_required', sa.VARCHAR(), nullable=True),
    sa.Column('authentication_type', sa.VARCHAR(), nullable=True),
    sa.Column('bytes_sent', sa.INTEGER(), nullable=True),
    sa.Column('cipher_suite', sa.VARCHAR(), nullable=True),
    sa.Column('error_code', sa.VARCHAR(), nullable=True),
    sa.Column('host_header', sa.VARCHAR(), nullable=True),
    sa.Column('host_id', sa.VARCHAR(), nullable=True),
    sa.Column('http_status', sa.INTEGER(), nullable=True),
    sa.Column('key', sa.VARCHAR(), nullable=True),
    sa.Column('object_size', sa.FLOAT(), nullable=True),
    sa.Column('referer', sa.VARCHAR(), nullable=True),
    sa.Column('request_uri', sa.VARCHAR(), nullable=True),
    sa.Column('signature_version', sa.VARCHAR(), nullable=True),
    sa.Column('tls_version', sa.VARCHAR(), nullable=True),
    sa.Column('total_time', sa.INTEGER(), nullable=True),
    sa.Column('turn_around_time', sa.FLOAT(), nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), nullable=True),
    sa.Column('version_id', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('request_id')
    )
    op.create_table('core_s3_logs',
    sa.Column('request_id', sa.VARCHAR(), nullable=False),
    sa.Column('time', sa.DATETIME(), nullable=True),
    sa.Column('request_uri', sa.VARCHAR(), nullable=True),
    sa.Column('operation', sa.VARCHAR(), nullable=True),
    sa.Column('bucket', sa.VARCHAR(), nullable=True),
    sa.Column('bucket_owner', sa.VARCHAR(), nullable=True),
    sa.Column('requester', sa.VARCHAR(), nullable=True),
    sa.Column('http_status', sa.INTEGER(), nullable=True),
    sa.Column('bytes_sent', sa.INTEGER(), nullable=True),
    sa.Column('remote_ip', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_city', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_loc', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_org', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_hostname', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country_name', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_asn', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_country', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_timezone', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_latitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_longitude', sa.FLOAT(), nullable=True),
    sa.Column('remote_ip_postal', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_region', sa.VARCHAR(), nullable=True),
    sa.Column('remote_ip_full_location', sa.VARCHAR(), nullable=True),
    sa.Column('access_point_arn', sa.VARCHAR(), nullable=True),
    sa.Column('acl_required', sa.VARCHAR(), nullable=True),
    sa.Column('authentication_type', sa.VARCHAR(), nullable=True),
    sa.Column('cipher_suite', sa.VARCHAR(), nullable=True),
    sa.Column('error_code', sa.VARCHAR(), nullable=True),
    sa.Column('host_header', sa.VARCHAR(), nullable=True),
    sa.Column('host_id', sa.VARCHAR(), nullable=True),
    sa.Column('key', sa.VARCHAR(), nullable=True),
    sa.Column('object_size', sa.FLOAT(), nullable=True),
    sa.Column('referer', sa.VARCHAR(), nullable=True),
    sa.Column('signature_version', sa.VARCHAR(), nullable=True),
    sa.Column('tls_version', sa.VARCHAR(), nullable=True),
    sa.Column('total_time', sa.INTEGER(), nullable=True),
    sa.Column('turn_around_time', sa.FLOAT(), nullable=True),
    sa.Column('user_agent', sa.VARCHAR(), nullable=True),
    sa.Column('version_id', sa.VARCHAR(), nullable=True),
    sa.PrimaryKeyConstraint('request_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('core_s3_logs')
    op.drop_table('out_s3_logs')
    op.drop_table('intake_logs')
    op.drop_table('datasette_request_logs')
    # ### end Alembic commands ###
