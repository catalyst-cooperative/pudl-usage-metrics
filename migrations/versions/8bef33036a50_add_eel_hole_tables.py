"""add eel hole tables

Revision ID: 8bef33036a50
Revises: 1097f31cdffb
Create Date: 2025-09-04 13:56:21.557370

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '8bef33036a50'
down_revision: Union[str, None] = '1097f31cdffb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('core_eel_hole_downloads',
    sa.Column('insert_id', sa.String(), nullable=False, comment='A unique identifier for the log entry.'),
    sa.Column('timestamp', sa.DateTime(), nullable=True, comment='The time the event described by the log entry occurred.'),
    sa.Column('url', sa.String(), nullable=True, comment='What endpoint is a user hitting?'),
    sa.Column('params_name', sa.String(), nullable=True, comment='The name of the table being queried using DuckDB.'),
    sa.Column('params_page', sa.Integer(), nullable=True, comment='The page of the query.'),
    sa.Column('params_per_page', sa.Integer(), nullable=True, comment='The number of records returned per DuckDB query. This is set by us, so it should be expected to hold constant without our intervention.'),
    sa.Column('params_filters_field_name', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_1', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_1', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_1', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_1', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_2', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_2', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_2', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_2', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_3', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_3', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_3', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_3', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_4', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_4', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_4', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_4', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_5', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_5', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_5', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_5', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('partition_key', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    op.create_table('core_eel_hole_hits',
    sa.Column('insert_id', sa.String(), nullable=False, comment='A unique identifier for the log entry.'),
    sa.Column('timestamp', sa.DateTime(), nullable=True, comment='The time the event described by the log entry occurred.'),
    sa.Column('name', sa.String(), nullable=True, comment="The name of the PUDL table returned by a search query. Only populated for 'hit' event types."),
    sa.Column('score', sa.Float(), nullable=True, comment="The table's relevance score based on the provided search query. Only populated for 'hit' event types."),
    sa.Column('tags', sa.String(), nullable=True, comment="The tags associated with a given table in the search results. Only populated for 'hit' events types."),
    sa.Column('partition_key', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    op.create_table('core_eel_hole_log_ins',
    sa.Column('insert_id', sa.String(), nullable=False, comment='A unique identifier for the log entry.'),
    sa.Column('timestamp', sa.DateTime(), nullable=True, comment='The time the event described by the log entry occurred.'),
    sa.Column('text_payload', sa.String(), nullable=True, comment='Data provided to the logger in a text format. For the viewer, this includes the redirects generated by a user when logging in.'),
    sa.Column('log_in_query', sa.String(), nullable=True, comment='What was the user doing when they were motivated to log in? This mirrors query when the search prompted a log-in event.'),
    sa.Column('partition_key', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    op.create_table('core_eel_hole_previews',
    sa.Column('insert_id', sa.String(), nullable=False, comment='A unique identifier for the log entry.'),
    sa.Column('timestamp', sa.DateTime(), nullable=True, comment='The time the event described by the log entry occurred.'),
    sa.Column('url', sa.String(), nullable=True, comment='What endpoint is a user hitting?'),
    sa.Column('params_name', sa.String(), nullable=True, comment='The name of the table being queried using DuckDB.'),
    sa.Column('params_page', sa.Integer(), nullable=True, comment='The page of the query.'),
    sa.Column('params_per_page', sa.Integer(), nullable=True, comment='The number of records returned per DuckDB query. This is set by us, so it should be expected to hold constant without our intervention.'),
    sa.Column('params_filters_field_name', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_1', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_1', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_1', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_1', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_2', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_2', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_2', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_2', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_3', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_3', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_3', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_3', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_4', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_4', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_4', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_4', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('params_filters_field_name_5', sa.String(), nullable=True, comment='The variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_field_type_5', sa.String(), nullable=True, comment='The data type of the variable on which a user is performing a filter using DuckDB.'),
    sa.Column('params_filters_operation_5', sa.String(), nullable=True, comment='The operation performed on the variable a user is using to perform a filter using DuckDB (e.g., greater than, contains).'),
    sa.Column('params_filters_value_5', sa.String(), nullable=True, comment="The value that a user is using to perform a filter using DuckDB (e.g., greater than 2017, contains 'natural gas')."),
    sa.Column('partition_key', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    op.create_table('core_eel_hole_searches',
    sa.Column('insert_id', sa.String(), nullable=False, comment='A unique identifier for the log entry.'),
    sa.Column('timestamp', sa.DateTime(), nullable=True, comment='The time the event described by the log entry occurred.'),
    sa.Column('query', sa.String(), nullable=True, comment='What did a user type into the search box? This logs periodically, so multiple partial search queries may be logged as someone is typing.'),
    sa.Column('url', sa.String(), nullable=True, comment='What endpoint is a user hitting?'),
    sa.Column('partition_key', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('insert_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('core_eel_hole_searches')
    op.drop_table('core_eel_hole_previews')
    op.drop_table('core_eel_hole_logs')
    op.drop_table('core_eel_hole_log_ins')
    op.drop_table('core_eel_hole_hits')
    op.drop_table('core_eel_hole_downloads')
    # ### end Alembic commands ###
